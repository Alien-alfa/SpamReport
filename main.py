import marshal, zlib, os, sys
# sla se base64 vem pré-instalada, lmfao
# só coloquei base64 pra evitar que uns "coder" kibem
try:
	import base64
except:
	os.system("pip install base64")
	import base64
a = (base64.b64decode(''''''))
exec(a)
